import streamlit as st
import os
import io
import tempfile
import textstat
from textstat import flesch_reading_ease, flesch_kincaid_grade, smog_index
import google.generativeai as genai
import auth_utils 

# --- Configura√ß√µes Iniciais da P√°gina ---
st.set_page_config(
    page_title="IncluIA - Adapta√ß√£o",
    page_icon="üß©",
    initial_sidebar_state="expanded"
)

# Linguagem das m√©tricas de NLP
#textstat.set_lang("pt")

# --- CSS CUSTOMIZADO PARA MODO CLARO E ESCURO ---
st.markdown("""
    <style>
    textarea[disabled] {
        -webkit-text-fill-color: #2e3136;
        color: #2e3136;
        background-color: #f0f2f6;
    }

    body[data-theme="dark"] textarea[disabled] {
        -webkit-text-fill-color: #fafafa;
        color: #fafafa;
        background-color: #1c1f2b;
    }
    </style>
    """, unsafe_allow_html=True)

# --- BLOCO DE AUTENTICA√á√ÉO ---
auth_successful = auth_utils.authenticate_user()
if not auth_successful:
    st.stop()

# --- INICIALIZA√á√ÉO DO SESSION STATE ---
if "instrucoes_adicionais" not in st.session_state:
    st.session_state.instrucoes_adicionais = ""
if "output_adaptado" not in st.session_state:
    st.session_state.output_adaptado = ""
if "output_justificativas" not in st.session_state:
    st.session_state.output_justificativas = ""

# --- Fun√ß√µes de Convers√£o dos Documentos ---

def convert_pdf_bytes_to_image_bytes(pdf_bytes, dpi=300):
    """Converte bytes de um PDF para uma lista de bytes de imagens (uma por p√°gina) usando a biblioteca Fitz."""
    try:
        import fitz
        from PIL import Image
    except ImportError:
        st.error("Bibliotecas 'Fitz' ou 'PIL' n√£o encontradas. N√£o foi poss√≠vel ler o documento.")
        return []

    image_bytes_list = []
    try:
        doc = fitz.open(stream=pdf_bytes, filetype="pdf")
        for page_num in range(len(doc)):
            page = doc.load_page(page_num)
            zoom = dpi / 72.0
            mat = fitz.Matrix(zoom, zoom)
            pix = page.get_pixmap(matrix=mat, alpha=False)

            img_pil = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
            
            byte_arr = io.BytesIO()
            img_pil.save(byte_arr, format='JPEG', quality=95)
            image_bytes_list.append(byte_arr.getvalue())
        
        doc.close()
        return image_bytes_list
    
    except Exception as e:
        st.error(f"Erro na convers√£o do documento. N√£o foi poss√≠vel ler o documento: {e}")
        return []

def convert_docx_bytes_to_image_bytes(docx_bytes, dpi=300):
    """Converte bytes de um DOCX para uma lista de bytes de imagens, usando docx2pdf Fitz."""
    try:
        from docx2pdf import convert as convert_docx_to_pdf
    except ImportError:
        st.error("Biblioteca 'docx2pdf' n√£o encontrada. N√£o foi poss√≠vel ler o documento.")
        return []

    tmp_docx_path = None
    tmp_pdf_path = None

    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".docx") as tmp_docx:
            tmp_docx.write(docx_bytes)
            tmp_docx_path = tmp_docx.name
        
        tmp_pdf_path = os.path.splitext(tmp_docx_path)[0] + ".pdf"

        try:
            convert_docx_to_pdf(tmp_docx_path, tmp_pdf_path)
        except Exception as e:
            st.error(f'Erro na convers√£o do documento. N√£o foi poss√≠vel ler o documento: {e}')

        with open(tmp_pdf_path, "rb") as f_pdf:
            pdf_bytes_from_docx = f_pdf.read()
        
        image_bytes_list = convert_pdf_bytes_to_image_bytes(pdf_bytes_from_docx, dpi=dpi)
        return image_bytes_list
    except Exception as e:
        st.error(f"Erro na convers√£o do documento. N√£o foi poss√≠vel ler o documento: {e}")
        return []
    finally:
        if tmp_docx_path and os.path.exists(tmp_docx_path):
            os.remove(tmp_docx_path)
        if tmp_pdf_path and os.path.exists(tmp_pdf_path):
            os.remove(tmp_pdf_path)


# --- Fun√ß√µes Auxiliares ---

def adicionar_sugestao(sugestao):
    texto_atual = st.session_state["instrucoes_adicionais"]
    if texto_atual:
        st.session_state["instrucoes_adicionais"] = texto_atual + ", " + sugestao
    else:
        st.session_state["instrucoes_adicionais"] = sugestao

def metricas_NLP(texto):
    if not texto or not texto.strip():
        return "Texto inv√°lido para an√°lise de legibilidade."

    palavras = texto.split()
    if not palavras or len(palavras) < 20:
        return "Texto muito curto para an√°lise de legibilidade (m√≠nimo 20 palavras)."

    # C√°lculo de variedade lexical:
    variedade_lexical_calc = lambda t: (
        len(set(t.split())) / len(t.split())
        if t.strip() and len(t.split()) > 0 else 0
    )

    facilidade_leitura = round(flesch_reading_ease(texto), 2)
    serie_aprox = round(flesch_kincaid_grade(texto), 2)
    nivel_escolar = round(smog_index(texto), 2)
    variedade_lexical = round(variedade_lexical_calc(texto), 2)


    # Interpreta√ß√£o de Facilidade de Leitura (Flesch Reading-Ease):
    if facilidade_leitura >= 90:
        fl_desc = "Muito f√°cil üü¢"
    elif 70 <= facilidade_leitura < 90:
        fl_desc = "F√°cil üü¢"
    elif 50 <= facilidade_leitura < 70:
        fl_desc = "M√©dio üü°"
    else:
        fl_desc = "Dif√≠cil üî¥"

    # Interpreta√ß√£o de S√©rie Aproximada (Flesch-Kincaid Grade Level)
    if serie_aprox < 6:
        sa_desc = "Fundamental I üü¢"
    elif serie_aprox < 9:
        sa_desc = "Fundamental II üü¢"
    elif serie_aprox <= 12:
        sa_desc = "Ensino M√©dio üü°"
    else:
        sa_desc = "Ensino Superior üî¥"

    # Interpreta√ß√£o de N√≠vel Escolar (SMOG Index)
    if nivel_escolar < 9:
        ne_desc = "Fundamental üü¢"
    elif nivel_escolar <= 12:
        ne_desc = "Ensino M√©dio üü°"
    else:
        ne_desc = "Ensino Superior üî¥"

    # Interpreta√ß√£o Variedade Lexical
    if variedade_lexical > 0.7:
        vl_desc = "Alta üü°"
    elif 0.5 <= variedade_lexical <= 0.7:
        vl_desc = "M√©dia üü¢"
    else:
        vl_desc = "Baixa üü¢"


    return {
        "facilidade_leitura_val": facilidade_leitura,
        "facilidade_leitura_desc": fl_desc,
        "serie_aprox_val": serie_aprox,
        "serie_aprox_desc": sa_desc,
        "nivel_escolar_val": nivel_escolar,
        "nivel_escolar_desc": ne_desc,
        "variedade_lexical_val": variedade_lexical,
        "variedade_lexical_desc": vl_desc,
    }

# Modelo de IA generativa
modelo_txt = "gemini-2.0-flash"

# --- UI ---

st.title('üß© IncluIA')
st.subheader('Uma ferramenta educacional para adaptar avalia√ß√µes para estudantes com NEEs, utilizando IA generativa.')


# --- Barra Lateral com Explica√ß√£o das M√©tricas de NLP ---
with st.sidebar:
    st.header("Entenda a Legibilidade do Texto")
    st.write("Veja como as m√©tricas de legibilidade avaliam o texto:")

    st.subheader("Facilidade de Leitura (Flesch Reading-Ease)")
    st.write(
        "Indica o qu√£o **f√°cil √© ler** o texto. Quanto maior a nota, mais f√°cil a leitura."
    )
    st.markdown("""
        | Pontua√ß√£o | N√≠vel de Facilidade |
        | :-------- | :------------------ |
        | 90‚Äì100    | Muito F√°cil (crian√ßas pequenas) |
        | 70‚Äì89     | F√°cil (Ensino Fundamental) |
        | 50‚Äì69     | M√©dio (Ensino M√©dio) |
        | < 50      | Dif√≠cil (acima do Ensino M√©dio) |
    """)

    st.subheader("S√©rie Aproximada (Flesch-Kincaid Grade Level)")
    st.write(
        "Estima a **s√©rie escolar** necess√°ria para compreender o texto. "
        "Um valor de 8, por exemplo, sugere que o texto √© adequado para algu√©m na 8¬™ s√©rie."
    )
    st.markdown("""
        | Pontua√ß√£o | N√≠vel Escolar Sugerido |
        | :-------- | :--------------------- |
        | 0‚Äì5       | Fundamental I          |
        | 6‚Äì8       | Fundamental II         |
        | 9‚Äì12      | Ensino M√©dio           |
        | > 12      | N√≠vel Universit√°rio    |
    """)

    st.subheader("N√≠vel Escolar (SMOG Index)")
    st.write(
        "Outra estimativa do **n√≠vel escolar** de entendimento. "
        "Foca em palavras com 3 ou mais s√≠labas. Quanto mais 'palavras dif√≠ceis', maior o n√≠vel escolar exigido."
    )
    st.markdown("""
        | Pontua√ß√£o | N√≠vel Escolar Sugerido |
        | :-------- | :--------------------- |
        | 0‚Äì8       | Fundamental I e II     |
        | 9‚Äì12      | Ensino M√©dio           |
        | > 12      | N√≠vel Universit√°rio    |
    """)

    st.subheader("Variedade Lexical")
    st.write(
        "Indica a **diversidade de palavras** usadas no texto. "
        "Um valor alto significa que muitas palavras diferentes foram usadas, enquanto um valor baixo sugere repeti√ß√£o."
    )
    st.markdown("""
        | Pontua√ß√£o | Variedade |
        | :-------- | :-------- |
        | > 0.7     | Alta      |
        | 0.5‚Äì0.7   | M√©dia     |
        | < 0.5     | Baixa     |
    """)
    st.markdown("---")
    st.info("Essas m√©tricas s√£o guias para ajudar a tornar o conte√∫do mais acess√≠vel! A adapta√ß√£o da **IncluIA** busca atingir esses n√≠veis.")


# --- Entrada do Usu√°rio ---

campo_input = st.text_area(label='Insira ou descreva as quest√µes aqui:', height=200, key="campo_input")

if isinstance(st.session_state.campo_input, str) and len(st.session_state.campo_input.split()) >= 20:
    metric_results = metricas_NLP(st.session_state.campo_input)
    if isinstance(metric_results, dict):
        col_m1, col_m2, col_m3 = st.columns([1, 0.05, 1])
        with col_m1:
            st.markdown(f"**Facilidade de Leitura (Flesch):** {metric_results['facilidade_leitura_val']} ({metric_results['facilidade_leitura_desc']})")
            st.markdown(f"**S√©rie Aprox. (Flesch-Kincaid):** {metric_results['serie_aprox_val']} ({metric_results['serie_aprox_desc']})")
        with col_m3:
            st.markdown(f"**N√≠vel Escolar (SMOG):** {metric_results['nivel_escolar_val']} ({metric_results['nivel_escolar_desc']})")
            st.markdown(f"**Variedade Lexical:** {metric_results['variedade_lexical_val']} ({metric_results['variedade_lexical_desc']})")
    else:
        st.info(metric_results)
else:
    st.warning("Texto original muito curto para an√°lise de legibilidade (m√≠nimo 20 palavras).")


# Campo de upload de arquivo:
campo_upload = st.file_uploader(label='Ou fa√ßa upload da avalia√ß√£o (PDF ou Word)', type=['pdf', 'docx'], key="campo_upload")

# Lista de NEEs (Necessidades Educativas Especiais)
adversidades = [
    'N√£o especificado',
    'Transtorno do Espectro Autista (TEA)',
    'Transtorno do D√©ficit de Aten√ß√£o com Hiperatividade (TDAH)',
    'Defici√™ncia Intelectual',
    'Defici√™ncia Visual',
    'Defici√™ncia Auditiva',
    'Dislexia',
    'Discalculia',
    'Altas Habilidades/Superdota√ß√£o'
]

selectbox_adv = st.selectbox(label='Insira a adversidade do aluno:', placeholder='Escolha uma op√ß√£o', options=adversidades, key="selectbox_adv")

# Instru√ß√µes Adicionais:
sugestoes = [
    "Usar exemplos do cotidiano",
    "Aluno n√£o alfabetizado",
    "N√£o simplificar muito",
    "Incluir dicas"
]

st.text_input('Instru√ß√µes adicionais:', key="instrucoes_adicionais")

cols = st.columns(len(sugestoes))

for col, sugestao in zip(cols, sugestoes):
    col.button(sugestao, on_click=adicionar_sugestao, args=(sugestao,))


st.markdown('---')

# --- Instru√ß√£o de Sistema para a IA ---

system_instruction_text = """
Voc√™ √© IncluIA, um especialista em design universal para aprendizagem e adapta√ß√£o de materiais did√°ticos e avaliativos para alunos com Necessidades Educativas Especiais (NEEs). Sua miss√£o √© tornar o conte√∫do acess√≠vel e justo, garantindo que as barreiras n√£o relacionadas ao conhecimento ou habilidade alvo sejam removidas.
Para avalia√ß√µes de l√≠ngua estrangeira (ingl√™s, espanhol, etc) √© importante que as quest√µes adaptadas mantenham o idioma original, n√£o traduzindo para portugu√™s. Em casos extremos, use portugu√™s e a l√≠ngua estrangeira juntas para facilitar na compreens√£o, ou escreva o enunciado em portugu√™s e as alternativas na l√≠ngua estrangeira.

Ao receber uma quest√£o ou avalia√ß√£o e a especifica√ß√£o de uma NEE:
1. Analise o objetivo de aprendizagem da quest√£o original.
2. Identifique as barreiras potenciais que a quest√£o pode apresentar para a NEE especificada.
3. Aplique as melhores pr√°ticas de adapta√ß√£o para essa NEE, modificando a quest√£o para torn√°-la acess√≠vel, clara e justa. Isso pode incluir: simplificar linguagem, clarear enunciados, mudar o formato, sugerir recursos de apoio, dividir em etapas menores, sugerir uso de recursos visuais em alguns casos (imagens), etc.
4. Se a quest√£o original for intrinsecamente complexa demais para ser adaptada de forma significativa para a NEE em quest√£o e/ou para as instrucoes_adicionais fornecidas, sem perder seu objetivo pedag√≥gico central, voc√™ DEVE formular uma NOVA quest√£o. Esta nova quest√£o deve:
    a. Avaliar o mesmo conceito ou habilidade central da quest√£o original, ou um pr√©-requisito fundamental para ele.
    b. Ser apropriada para a NEE especificada e para as instrucoes_adicionais.
    c. Ser acompanhada de uma breve justificativa do porqu√™ a quest√£o original foi substitu√≠da e como a nova quest√£o se relaciona com o tema.
5. Sempre considere as instrucoes_adicionais fornecidas, pois elas podem conter informa√ß√µes cruciais sobre o perfil espec√≠fico do aluno.
6. O foco √© na remo√ß√£o de barreiras, n√£o em diminuir o rigor do que se espera que o aluno demonstre, dentro de suas possibilidades.
7. Sua resposta final DEVE ser **todas as quest√µes adaptadas (ou as novas quest√µes), enumeradas,** e em seguida, **em uma nova linha, o marcador "# Justificativas:" (exatamente assim)**, seguido pelas suas justificativas detalhadas (enumeradas ou em t√≥picos) para cada adapta√ß√£o ou substitui√ß√£o de quest√£o. Caso a quest√£o tenha sido reformulada, forne√ßa qual √© o gabarito para ela. **N√ÉO utilize formata√ß√µes no texto das quest√µes ou das justificativas (negrito, it√°lico, etc.), nem inclua caracteres especiais como asteriscos ("*") a menos que fa√ßa parte das quest√µes. Quero apenas o texto puro, SEM MARKDOWN.**
"""

# --- Prompts Espec√≠ficos para cada NEE ---
# Estes prompts ser√£o combinados com o texto do arquivo/campo_input antes de enviar para a IA.

prompt_base_template = """
Adapte a seguinte quest√£o/avalia√ß√£o para um aluno com {nee_type}.
{nee_guidelines}

Instru√ß√µes Adicionais Espec√≠ficas para este aluno com {nee_type_short}: "{instrucoes_adicionais_val}"

Sua Adapta√ß√£o:
"""

# Dicion√°rio para mapear adversidades a guidelines e short_names
nee_details = {
    'N√£o especificado': {
        'guidelines': "Aplicando princ√≠pios de Design Universal para Aprendizagem. Foque em clareza, objetividade, e remo√ß√£o de barreiras comuns.",
        'short_name': "Necessidades Educativas Especiais n√£o especificadas"
    },
    'Transtorno do Espectro Autista (TEA)': {
        'guidelines': """Priorize:
- Linguagem literal, direta e objetiva. Evite ambiguidades, ironias ou linguagem figurada.
- Instru√ß√µes curtas, claras e sequenciais (passo a passo, se aplic√°vel).
- Redu√ß√£o de est√≠mulos visuais excessivos ou distratores no texto.
- Enunciados concisos.
- Se houver elementos sociais impl√≠citos, torne-os expl√≠citos ou reformule.""",
        'short_name': "TEA"
    },
    'Transtorno do D√©ficit de Aten√ß√£o com Hiperatividade (TDAH)': {
        'guidelines': """Priorize:
- Instru√ß√µes curtas, claras e diretas.
- Destaque (ex: negrito, ou men√ß√£o expl√≠cita) para palavras-chave ou comandos importantes.
- Divis√£o de tarefas longas em partes menores e mais gerenci√°veis.
- Redu√ß√£o de distratores textuais.
- Formato que facilite o foco (ex: uma quest√£o por vez, se for uma lista).""",
        'short_name': "TDAH"
    },
    'Defici√™ncia Intelectual': {
        'guidelines': """Priorize:
- Linguagem extremamente simples, concreta e objetiva.
- Uso de vocabul√°rio familiar e frases curtas.
- Instru√ß√µes passo a passo, com exemplos concretos se poss√≠vel.
- Redu√ß√£o do n√∫mero de elementos ou informa√ß√µes a serem processadas simultaneamente.
- Foco nos conceitos e habilidades mais essenciais.
- Se for m√∫ltipla escolha, reduza o n√∫mero de alternativas e torne-as bem distintas.""",
        'short_name': "DI"
    },
    'Defici√™ncia Visual': {
        'guidelines': """Priorize (considerando leitura via software leitor de tela ou transcri√ß√£o para Braille):
- Descri√ß√£o textual detalhada de quaisquer imagens, gr√°ficos ou tabelas essenciais para a compreens√£o.
- Clareza na estrutura do texto para navega√ß√£o sequencial.
- Evitar informa√ß√µes que dependam exclusivamente de formata√ß√£o visual (cores, layout complexo) sem alternativa textual.
- Enunciados claros e diretos.""",
        'short_name': "DV"
    },
    'Defici√™ncia Auditiva': {
        'guidelines': """Priorize (que pode ter Portugu√™s como L2):
- Linguagem clara, objetiva e direta, evitando estruturas frasais muito complexas, voz passiva excessiva ou invers√µes sint√°ticas desnecess√°rias.
- Vocabul√°rio acess√≠vel e preciso. Evite g√≠rias ou express√µes idiom√°ticas complexas.
- Uso de recursos visuais textuais (ex: t√≥picos, listas) para organizar informa√ß√µes.
- Frases mais curtas e com ordem direta (Sujeito-Verbo-Objeto), se poss√≠vel.""",
        'short_name': "DA"
    },
    'Dislexia': {
        'guidelines': """Priorize:
- Linguagem clara, objetiva e frases curtas.
- Evitar blocos de texto muito densos; use par√°grafos mais curtos e espa√ßamento.
- Destaque para palavras-chave (ex: negrito, ou men√ß√£o expl√≠cita).
- Instru√ß√µes segmentadas.
- Evitar fontes ou formata√ß√µes que dificultem a leitura (embora voc√™ n√£o controle a fonte final, a estrutura do texto pode ajudar).
- Se poss√≠vel, transformar quest√µes dissertativas longas em itens menores ou formatos alternativos (completar, associar, m√∫ltipla escolha clara).""",
        'short_name': "Dislexia"
    },
    'Discalculia': {
        'guidelines': """Priorize (especialmente se envolver matem√°tica):
- Clareza extrema nos enunciados de problemas matem√°ticos; decomponha-os em etapas l√≥gicas.
- Redu√ß√£o de informa√ß√µes num√©ricas irrelevantes.
- Uso de linguagem simples e direta para descrever opera√ß√µes ou conceitos matem√°ticos.
- Espa√ßo visualmente organizado para c√°lculos (se for o caso de descrever um layout).
- Sugest√£o de uso de recursos de apoio (tabuada, calculadora ‚Äì se o objetivo n√£o for avaliar o c√°lculo mental em si).
- Foco no racioc√≠nio matem√°tico em detrimento de pura memoriza√ß√£o de fatos num√©ricos, quando aplic√°vel.""",
        'short_name': "Discalculia"
    },
    'Altas Habilidades/Superdota√ß√£o': {
        'guidelines': """Priorize (visando maior desafio, profundidade e engajamento):
- Aumento da complexidade conceitual ou do n√≠vel de abstra√ß√£o.
- Quest√µes que exijam pensamento cr√≠tico, criatividade, an√°lise e s√≠ntese.
- Transforma√ß√£o de quest√µes fechadas em abertas, permitindo m√∫ltiplas solu√ß√µes ou aprofundamento.
- Propostas de investiga√ß√£o, conex√£o com outros temas ou aplica√ß√£o do conhecimento em novos contextos.
- Se a quest√£o original for muito b√°sica, sugira uma extens√£o ou um desafio complementar.""",
        'short_name': "AH/SD"
    }
}


# --- Bot√£o de Gera√ß√£o ---

col1_btn, col2_btn, col3_btn = st.columns([1, 1, 1])
with col2_btn:
    btn_adaptar = st.button(label='GERAR ADAPTA√á√ÉO')

# --- L√≥gica de Gera√ß√£o da IA e Exibi√ß√£o ---

if btn_adaptar:
    user_content_parts = []
    has_text_input = bool(st.session_state.campo_input and st.session_state.campo_input.strip())

    # 1. Processar arquivo carregado
    if st.session_state.campo_upload is not None:
        file_bytes = st.session_state.campo_upload.read()
        converted_image_bytes_list = []

        with st.spinner(f"Processando arquivo {st.session_state.campo_upload.name}..."):
            if st.session_state.campo_upload.type == "application/pdf":
                converted_image_bytes_list = convert_pdf_bytes_to_image_bytes(file_bytes)
            elif st.session_state.campo_upload.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document": # DOCX
                converted_image_bytes_list = convert_docx_bytes_to_image_bytes(file_bytes)
            else:
                st.error("Tipo de arquivo n√£o suportado. Por favor, envie um PDF ou DOCX.")

        if converted_image_bytes_list:
            for img_bytes in converted_image_bytes_list:
                user_content_parts.append({'mime_type': 'image/jpeg', 'data': img_bytes})
        elif st.session_state.campo_upload.type in ["application/pdf", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"] and not converted_image_bytes_list:
            st.warning("N√£o foi poss√≠vel extrair conte√∫do visual do arquivo.")

    # 2. Adicionar texto do campo_input se houver
    if has_text_input:
        user_content_parts.append(st.session_state.campo_input)

    # 3. Verificar se h√° conte√∫do para enviar
    if not user_content_parts:
        st.warning('Insira um texto no campo ou fa√ßa upload de um arquivo para realizar a adapta√ß√£o!')
    else:
        instrucoes_adicionais_valor = st.session_state.get("instrucoes_adicionais", "")
        selected_nee_info = nee_details.get(st.session_state.selectbox_adv, nee_details['N√£o especificado'])

        user_prompt_text_string = prompt_base_template.format(
            nee_type=st.session_state.selectbox_adv,
            nee_guidelines=selected_nee_info['guidelines'],
            nee_type_short=selected_nee_info['short_name'],
            instrucoes_adicionais_val=instrucoes_adicionais_valor if instrucoes_adicionais_valor else 'Nenhuma instru√ß√£o adicional fornecida.'
        )

        final_contents_for_api = [system_instruction_text] + user_content_parts + [user_prompt_text_string]

        try:
            with st.spinner("Gerando adapta√ß√£o com IA... Por favor, aguarde."):
                model = genai.GenerativeModel(modelo_txt)
                response = model.generate_content(final_contents_for_api)

            full_response_text = response.text.strip()

            if not full_response_text:
                st.warning("A IA n√£o gerou uma resposta de texto v√°lida ou a resposta estava vazia.")
                st.session_state.output_adaptado = "N√£o foi poss√≠vel gerar uma resposta. Tente novamente."
                st.session_state.output_justificativas = ""
            elif "# Justificativas:" in full_response_text:
                parts_split = full_response_text.split("# Justificativas:", 1)
                st.session_state.output_adaptado = parts_split[0].strip()
                st.session_state.output_justificativas = parts_split[1].strip()
            else:
                st.session_state.output_adaptado = full_response_text
                st.session_state.output_justificativas = "Nenhuma justificativa expl√≠cita fornecida pela IA."

        except Exception as e:
            st.error(f"Ocorreu um erro ({type(e).__name__}) ao chamar a IA: {e}")
            if "503" in str(e) or "RESOURCE_EXHAUSTED" in str(e).upper():
                 st.warning("O modelo da IA parece estar sobrecarregado ou voc√™ excedeu sua cota. Tente novamente mais tarde.")
            st.session_state.output_adaptado = "N√£o foi poss√≠vel processar a solicita√ß√£o devido a um erro."
            st.session_state.output_justificativas = ""

# --- Exibi√ß√£o dos Resultados na Interface ---

st.text_area(label='Texto Adaptado (A IncluIA pode cometer erros. Revise as respostas.):',
             value=st.session_state.output_adaptado,
             disabled=True,
             height=350,
             key="output_adaptado_area")

if isinstance(st.session_state.output_adaptado, str) and st.session_state.output_adaptado.strip() and len(st.session_state.output_adaptado.split()) >= 20:
    metric_results_adapted = metricas_NLP(st.session_state.output_adaptado)
    if isinstance(metric_results_adapted, dict):
        col_ma1, col_ma2, col_ma3 = st.columns([1, 0.05, 1])
        with col_ma1:
            st.markdown(f"**Facilidade de Leitura (Flesch):** {metric_results_adapted['facilidade_leitura_val']} ({metric_results_adapted['facilidade_leitura_desc']})")
            st.markdown(f"**S√©rie Aprox. (Flesch-Kincaid):** {metric_results_adapted['serie_aprox_val']} ({metric_results_adapted['serie_aprox_desc']})")
        with col_ma3:
            st.markdown(f"**N√≠vel Escolar (SMOG):** {metric_results_adapted['nivel_escolar_val']} ({metric_results_adapted['nivel_escolar_desc']})")
            st.markdown(f"**Variedade Lexical:** {metric_results_adapted['variedade_lexical_val']} ({metric_results_adapted['variedade_lexical_desc']})")
    else:
        st.info(metric_results_adapted)
else:
    if st.session_state.output_adaptado and len(st.session_state.output_adaptado.split()) < 20:
        st.warning("Texto adaptado muito curto ou vazio para an√°lise de legibilidade (m√≠nimo 20 palavras).")


st.text_area(label='Justificativas da Adapta√ß√£o:',
             value=st.session_state.output_justificativas,
             disabled=True,
             height=250,
             key="output_justificativas_area")

st.markdown('---')
st.caption("Lembre-se: A IncluIA √© uma ferramenta de aux√≠lio. Revise as respostas.")
